# import datetime
# import pandas as pd
import requests
from pprint import pprint


class ConfigureRESTrequest:
    """ Descriptor class for CryptoCompare REST API calls """
    
    # *** ROOT ENDPOINT ***
    root_endpoint = "https://min-api.cryptocompare.com/data/"
    # *** TOPLIST ***
    # > root/top
    vol_subs_24h = 'top/totalvol'
    top_tier_vol_subs_24hr = 'top/ttaltoptiervol'
    market_cap_subs = 'top/mktcap'
    direct_vol = 'top/directvol'
    by_price = 'top/price'
    percent_change = 'top/percent'
    # *** SUBS ***
    # > root/v2
    subs_by_pair = 'v2/subs'
    subs_watchlist = 'subsWatchlist'

    def __init__(self):
        """
        Class descriptor for REST request URL, and
        :param: endpoint: REST api endpoint URL, link endpoint automatically appended to root-URL
        :param: limit: The number of coins to return in the toplist, *** will round to steps of 10 coins ***
        :param: fsyms: Cryptocurrency symbol of interest
        :param: tsym: Comma separated cryptocurrency symbols list to convert into
        :param: page: The pagination for the request??
        :param: asset_class: The asset class of a set of coins to filter the toplist by. [DEFI]-[ALL]
        TODO wtf are pagination requests???
        """
        self.endpoint = ''
        self.limit = int
        self.fsyms = str
        self.tsym = str
        self.page = int
        self.asset_class = str
        self.param_dict = dict()
        
        self.r = requests.models.Request
        self.r_URL = str
        
    def __get__(self, instance, owner):
        return self.instance

    def __set__(self, instance, value):
        self.instance = value

    def __repr__(self):
        return f'{self.param_dict}'


class RESTapi(ConfigureRESTrequest):
    def __init__(self):
        super().__init__()
        
    def requester(self):
        """
        Basically a setter method.
        requests.get() data from endpoint, modifies object instance parameter dictionary
        """
        self.r = requests.get(self.endpoint, params=self.param_dict)

    def request_url(self):
        """ :returns: URL generated by 'requests' """
        self.r_URL = self.r.url

    def get_json(self):
        """ :returns: JSON data from request object """
        print('\nREST JSON Response:')
        pprint(f'\n{self.r.json()}\n')
        return self.r.json()

    def see_get_request(self):
        """ Prints request metas """
        try:
            print('\n------------------------------------------------------')
            print(f'REST call URL: {self.r_URL}')
            for key, value in self.param_dict.items():
                print(f"\nKey='{key}'\t-->\tValue='{value}'")
            print('\n------------------------------------------------------')
        except TypeError or ValueError:
            print('Something went wrong...')
            return
    

class TopsREST(RESTapi):
    """
    Wrapper for easy access to all the WebSocket helper endpoints
    TODO Add descriptor methods?
    TODO 'Push-to-Mongo' method for concurrent DB transaction
    """
    
    rest = RESTapi()
    
    def __init__(self):
        super().__init__()
        
    def tops_param_dict(self, limit=10, page=0, tsym='USD', asset_class='ALL'):
        """
        Parameters dictionary passed to 'params' keyword argument in requests.get()
        Attributes: limit, page, tsym, assetClass, ascending, sign
        """
        self.limit = limit
        self.page = page
        self.tsym = tsym
        self.asset_class = asset_class
        self.param_dict = dict(limit=self.limit, page=self.page, tsym=self.tsym, asset_class=self.asset_class)
    
    def top_vol_subs(self, **kwargs):
        """
        Get a number of top coins by their total volume across all markets in the last 24 hours.
        Default value is first page (0) and the top 10 coins.
        Attributes: limit, page, tsym, assetClass, ascending, sign
        """
        self.endpoint = self.root_endpoint + self.vol_subs_24h
        self.tops_param_dict(**kwargs)
        self.requester()
        
    def top_tier_vol(self, **kwargs):
        """
        Get a number of top coins by their total top tier volume on the top 20 markets in the last 24 hours.
        Default value is first page (0) and the top 10 coins.
        Attributes: limit, page, tsym, assetClass, ascending, sign
        """
        self.endpoint = self.root_endpoint + self.top_tier_vol_subs_24hr
        self.tops_param_dict(**kwargs)
        self.requester()
        
    def top_mrkt_cap_subs(self, **kwargs):
        """
        Get a number of top coins by their market cap.
        Default value is first page (0) and the top 10 coins.
        Attributes: limit, page, tsym, assetClass, ascending, sign
        """
        self.endpoint = self.root_endpoint + self.market_cap_subs
        self.tops_param_dict(**kwargs)
        self.requester()
    
    def top_direct_vol(self, **kwargs):
        """
        Get a number of top coins by their total top tier volume on the top 20 markets in the last 24 hours.
        Default value is first page (0) and the top 10 coins.
        Attributes: limit, page, tsym, assetClass, ascending, sign
        """
        self.endpoint = self.root_endpoint + self.direct_vol
        self.tops_param_dict(**kwargs)
        self.requester()
        
    def top_by_price(self, **kwargs):
        """
        Get a number of top coins by their price.
        Default value is first page (0) and the top 10 coins.
        """
        self.endpoint = self.root_endpoint + self.by_price
        self.tops_param_dict(**kwargs)
        self.requester()
        
    def top_percent_change(self, **kwargs):
        """
        Get a number of top coins by their price percentage change in the last 24 hours.
        Default value is first page (0) and the top 10 coins.
        """
        self.endpoint = self.root_endpoint + self.percent_change
        self.tops_param_dict(**kwargs)
        self.requester()
    
    def __repr__(self):
        return f'{self.param_dict}'


class SubCallREST(RESTapi):
    """
    Request information about stream subscriptions.
    Call help() on methods to get docstring describing its function
    TODO Include formatting for 'sub_watchlist' and 'general_coin_info' responses
    """
    
    rest = RESTapi()
    
    def __init__(self):
        super().__init__()
        
    def subs_pair(self, fsym='BTC', tsym='USD'):
        """
        Get fsym info, agg streaming snapshot,
        and all the available streamer subscription channels for the requested pairs.
        """
        self.endpoint = self.root_endpoint + self.subs_by_pair
        self.fsyms = fsym
        self.tsym = tsym
        self.param_dict = dict(fsym=self.fsyms, tsyms=self.tsym)
        self.requester()

    def sub_watchlist(self, fsyms='BTC', tsym='USD'):
        """
        Get combinations of subs and pricing info in order
        to know what needs to be streamed and how to connect to the streamers.
        For response conversion formatting visit link below:
        https://min-api.cryptocompare.com/documentation/websockets?key=Streaming&cat=coinsGeneralInfoEndpoint
        """
        self.endpoint = self.endpoint + self.subs_watchlist
        self.fsyms = fsyms
        self.tsym = tsym
        self.param_dict = dict(fsyms=self.fsyms, tsym=self.tsym)
        self.requester()

    def general_coin_info(self, fsyms='BTC,ETH', tsym='USD'):
        """
        Get combinations of subs and pricing info in order
        to know what needs to be streamed and how to connect to the streamers.
        """
        self.endpoint = "https://min-api.cryptocompare.com/data/coin/generalinfo"
        self.fsyms = fsyms
        self.tsym = tsym
        self.param_dict = dict(fsyms=fsyms, tsym=tsym)
        self.requester()


def telesto(sets=True, genfo=False):
    """
    Call function with no arguments
    Displays All helper endpoints with default arguments
    TODO Add JSON.dump() 'pretty_format' method for human readability
    """
    
    try:
        tops = TopsREST()
        subs = SubCallREST()
    except ConnectionError:
        raise
    
    def top_streams(**kwargs):
        """
        Prints JSON responses for: ALL top helperEndpoints
        :param kwargs:
        :param kwargs:
        :param kwargs:
        :param kwargs:
        :return: None
        """
        tops.top_vol_subs(**kwargs)
        tops.see_get_request()
        tops.get_json()
    
        tops.top_percent_change(**kwargs)
        tops.see_get_request()
        tops.get_json()
    
        tops.top_mrkt_cap_subs(**kwargs)
        tops.see_get_request()
        tops.get_json()
    
        tops.top_direct_vol(**kwargs)
        tops.see_get_request()
        tops.get_json()
    
    def gen_info(**kwargs):
        """
        TODO Response formatting
        Prints JSON responses for: subscription pairs, subscription watch lists, and general coin info
        :param kwargs: fsym='BTC' -> Crypto Currency
        :param kwargs: tsym='USD' -> Conversion Currency
        :return: None
        """
        subs.subs_pair(**kwargs)
        subs.see_get_request()
        subs.get_json()
    
        subs.sub_watchlist(**kwargs)
        subs.see_get_request()
        subs.get_json()
    
        subs.general_coin_info(**kwargs)
        subs.see_get_request()
        subs.get_json()
    
    if sets and genfo:
        return top_streams, gen_info
    
    elif genfo and not sets:
        return gen_info
    
    else:
        return top_streams


if __name__ == "__main__":
    print('Initializing HelperEndPoints module...')
    
    topping = TopsREST()
    
    topping.top_by_price(tsym='USD', limit=20)
    print(topping.param_dict)
    topping.see_get_request()
    topping.get_json()
    
    topping.top_percent_change(tsym='EUR')
    print(topping.param_dict)
    topping.see_get_request()
    topping.get_json()
    
    # SINGLE HELPER ENDPOINT CALL STRUCTURE
    # topPerChg = TopsREST()
    # topPerChg.top_by_price(tsym='USD', limit=20)
    # topPerChg.see_get_request()
    # topPerChg.get_json()
    
    # topCoins = telesto()
    # topCoins(tsym='EUR')
