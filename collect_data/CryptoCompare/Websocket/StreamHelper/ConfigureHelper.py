import requests


class ConfigureRESTreq:
    """ Descriptor class for CryptoCompare REST API calls """
    
    # *** ROOT HELPER ENDPOINT ***
    root_endpoint = "https://min-api.cryptocompare.com/data/"
    
    # *** TOPLIST ***
    # > root/top/
    vol_subs_24h = 'top/totalvol'
    top_tier_vol_subs_24hr = 'top/ttaltoptiervol'
    market_cap_subs = 'top/mktcap'
    direct_vol = 'top/directvol'
    by_price = 'top/price'
    percent_change = 'top/percent'
    
    # *** SUBS ***
    # > root/v2/
    subs_by_pair = 'v2/subs'
    subs_watchlist = 'subsWatchlist'
    
    def __init__(self):
        """
        Class descriptor for REST request URL, and
        :param: endpoint: REST api endpoint URL, link endpoint automatically appended to root-URL
        :param: limit: The number of coins to return in the toplist, *** will round to steps of 10 coins ***
        :param: fsyms: Cryptocurrency symbol of interest
        :param: tsym: Comma separated cryptocurrency symbols list to convert into
        :param: page: The pagination for the request??
        :param: asset_class: The asset class of a set of coins to filter the toplist by. [DEFI]-[ALL]
        """
        # TODO wtf are pagination requests???
        
        self.endpoint = ''
        self.limit = int
        self.fsyms = str
        self.tsym = str
        self.page = int
        self.asset_class = str
        self.param_dict = dict()
        
        self.r = requests.models.Request
    
    def __get__(self, instance, owner):
        return self.instance
    
    def __set__(self, instance, value):
        self.instance = value
    
    def __repr__(self):
        return f'{self.param_dict}'


class RESTapi(ConfigureRESTreq):
    def __init__(self):
        super().__init__()
    
    def requester(self):
        """ requests.get() data from endpoint, modifies object instance parameter dictionary """
        self.r = requests.get(self.endpoint, params=self.param_dict)
    
    def get_json(self):
        """ :returns: JSON data from request object """
        return self.r.json()

    def request_url(self):
        """ :returns: URL generated by 'requests' """
        return self.r.url
    
    def response_headers(self):
        """ :returns: Response Header """
        return self.r.headers
    
    def status_code(self):
        """ :returns: HTTPS Status Code """
        return self.r.status_code


if __name__ == "__main__":
    print(f"'ConfigureHelper' Initializing as '{__name__}'")
else:
    print(f"'ConfigureHelper' Initializing as '{__name__}'")
